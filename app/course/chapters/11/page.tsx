import Quize from "@/app/course/chapters/quiz";
export default function Chapter11() {
const questions = [
  {
    question: "Что делает `useSearchParams()` в Next.js?",
    options: [
      "Обновляет состояние компонента",
      "Извлекает параметры из URL в клиентском компоненте",
      "Фильтрует данные на сервере",
      "Хранит глобальное состояние",
    ],
    correctIndex: 1,
  },
  {
    question: "Зачем использовать `usePathname()` с `useRouter()`?",
    options: [
      "Чтобы сбросить кеш данных",
      "Чтобы изменить URL при изменении параметров",
      "Чтобы вызвать API",
      "Чтобы отрендерить компонент повторно",
    ],
    correctIndex: 1,
  },
  {
    question: "Как работает поиск в dashboard-примере?",
    options: [
      "Фильтрация выполняется на клиенте",
      "URL параметр `?query=` используется для запроса на сервер",
      "Все данные загружаются сразу, фильтрация — позже",
      "Поиск не зависит от URL",
    ],
    correctIndex: 1,
  },
  {
    question: "Что произойдёт при `router.push()` с новым `query`?",
    options: [
      "Компонент обновит внутреннее состояние, но URL не изменится",
      "Будет перезапрос данных на сервере с новым параметром",
      "Будет переход на новую страницу",
      "Компонент полностью перерисуется на клиенте",
    ],
    correctIndex: 1,
  },
  {
    question: "Для чего нужна пагинация в примере?",
    options: [
      "Чтобы замедлить приложение",
      "Чтобы показать пользователю меньше данных за раз",
      "Чтобы применить client-side rendering",
      "Для генерации fallback-страниц",
    ],
    correctIndex: 1,
  },
  {
    question: "Как сервер узнаёт, какой `page` загрузить?",
    options: [
      "Из HTTP-заголовков",
      "Из сессии пользователя",
      "Из `searchParams` URL-а",
      "Через глобальную переменную",
    ],
    correctIndex: 2,
  },
  {
    question: "Что произойдёт при изменении параметра `page` в URL?",
    options: [
      "Сработает Suspense и покажет fallback",
      "Компонент перезагрузится и отрисует новые данные",
      "Ничего — параметр не используется",
      "Произойдёт ошибка",
    ],
    correctIndex: 1,
  },
  {
    question: "Как избежать SSR для параметров поиска и страницы?",
    options: [
      "Использовать `useClientSearch()`",
      "Хранить их в localStorage",
      "Работать с ними только в client components",
      "Хардкодить значения",
    ],
    correctIndex: 2,
  },
  {
    question: "Какие параметры используются в URL для поиска и пагинации?",
    options: ["search и limit", "q и offset", "query и page", "key и cursor"],
    correctIndex: 2,
  },
  {
    question: "Что делает компонент Pagination в примере?",
    options: [
      "Загружает все данные и делит их на части",
      "Показывает список ссылок на разные страницы с `page` параметром",
      "Сортирует данные по дате",
      "Формирует запрос к базе данных",
    ],
    correctIndex: 1,
  },
];

  return <Quize questions={questions} />;
}
